As is, Cojac is built with jdk6.21, then works well with jvm6 or jvm7.
It compiles with jdk7, but some of the tests fail ("missing frame").

Updating ASM to 4.0 doesn't directly help, but will be done soon anyway.

Using COMPUTE_FRAMES instead of COMPUTE_MAXS solves the build/test issue, 
but the result causes sometimes LinkageError at runtime with jvm7. It is
strange, as with the -javaagent mode, the SystemClassLoader is the only 
classloader at runtime (ok, except the bootclassloader). So it seems that
somehow, instrumenting a class C causes another "load class C" event, and that
such "reentrant" class loadings don't get instrumented, and we get 2 versions
of the same class. Just a hypothesis (hinted by 
http://osdir.com/ml/java.objectweb.asm/2007-07/msg00007.html).

I suspect the original problem of failing tests under jdk7 built to have its
root in the various "inserted methods" (log, print...), which asmified bytecode
have been gathered quite a long time ago (jvm5 code?). This should be updated.


Issues for enriched numbers (option -R)

- Verbose mode & interface: interfaces risk to be loaded by the verifier class
and to don't get instrumented.

- Array reference through proxy: The proxy break the references with float & double
arrays. A fix has been done but it do not cover all cases. A test show the problem
in ch.eiafr.cojac.unit.replace. The name of the test:
arrayPassedInNotInstrumentedSideModifiedWithAnOtherMethod

- Native methods: The native methods can be called but they cannot call methods or
access to instance or class fields.

- Callback: The callback written by the user will be instrumented and will not work
in uninstrumented part if it hanfle the float or double types.
Test example: arraySortedWithUserDefinedComparator

- Java reflection: not handled